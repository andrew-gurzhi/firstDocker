import ru.rb.commonlib.test.RandomInitializer;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Random;

import static org.unitils.reflectionassert.ReflectionAssert.assertReflectionEquals;

public  abstract class AbstractDefaultInitializator<T> {
    protected Random random = new Random(System.nanoTime());

    public Comparable<Field> getComparatorByNonContainingName(List<String> fields){
        return new Comparable<Field>() {
            @Override
            public int compareTo(Field field) {
                return fields.stream().noneMatch(str->field.getName().equals(str))? 0: 1;
            }
        };
    }

    public  void doTest(RandomInitializer initializer, Class<T> clazz){
        var source = initializer.randomInitialize(clazz);
        var recieved = this.getCopy(source);
        assertReflectionEquals(source, recieved);

    }

    public void doTest(T source){
        var recieved = this.getCopy(source);
        this.doTest(source, recieved);
    }

    public  void doTest(Class<T> clazz){
        RandomInitializer initializer = new RandomInitializer(getComparator());
        var source = initializer.randomInitialize(clazz);
        var recieved = this.getCopy(source);
        this.doTest(source, recieved);

    }

    public void doTest(T source, T received){
        assertReflectionEquals(source, received);
    }


    public abstract  T getCopy(T original);
    public abstract Comparable<Field> getComparator();


}
