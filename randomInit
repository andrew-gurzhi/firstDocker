import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.Random;

public class RandomInitializer {
    private Random random = new Random(System.currentTimeMillis());
    private Comparable<Field> compare = null;
    private List<RuleInitializer> ruleLists = new LinkedList();

    public RandomInitializer() {
    }

    public RandomInitializer(Comparable<Field> compare) {
        this.compare = compare;
    }

    public RandomInitializer(Comparable<Field> compare, Random random) {
        this.compare = compare;
        this.random = random;
    }

    public <T> T randomInitialize(Class<T> targetClazz) {
        if (targetClazz == null) {
            throw new NullPointerException("targetClass should be not a null");
        } else {
            try {
                RuleInitializer rule = (RuleInitializer)this.ruleLists.stream().filter((r) -> {
                    return r.getTargetClass() == targetClazz;
                }).findFirst().orElse((Object)null);
                Object object = this.initialize(targetClazz, rule);
                if (Objects.nonNull(rule)) {
                    return object;
                } else {
                    Field[] fields = targetClazz.getDeclaredFields();
                    Arrays.stream(fields).forEach((field) -> {
                        if (this.compare == null || this.compare.compareTo(field) == 0) {
                            this.initializePrimitive(field, object);
                        }
                    });
                    return object;
                }
            } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | InstantiationException var5) {
                throw new RuntimeException(var5);
            }
        }
    }

    public void addRule(RuleInitializer rule) {
        this.ruleLists.add(rule);
    }

    protected Object initialize(Class targetClazz, RuleInitializer rule) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        if (Objects.nonNull(rule)) {
            return rule.init();
        } else {
            Constructor<?> constructor = targetClazz.getConstructor();
            constructor.setAccessible(true);
            return constructor.newInstance();
        }
    }

    protected void initializePrimitive(Field field, Object object) {
        try {
            field.setAccessible(true);
            Class<?> clazz = field.getType();
            RuleInitializer rule = (RuleInitializer)this.ruleLists.stream().filter((r) -> {
                return r.getTargetClass() == clazz;
            }).findFirst().orElse((Object)null);
            if (rule != null) {
                field.set(object, rule.init());
            } else if (!clazz.equals(Integer.TYPE) && !clazz.equals(Integer.class)) {
                if (!clazz.equals(Long.TYPE) && !clazz.equals(Long.class)) {
                    if (!clazz.equals(Double.TYPE) && !clazz.equals(Double.class)) {
                        if (!clazz.equals(Float.TYPE) && !clazz.equals(Float.class)) {
                            if (!clazz.equals(Boolean.TYPE) && !clazz.equals(Boolean.class)) {
                                byte[] btw;
                                if (!clazz.equals(Byte.TYPE) && !clazz.equals(Byte.class)) {
                                    if (clazz.equals(String.class)) {
                                        btw = new byte[Math.abs(this.random.nextInt()) % 100 + 1];
                                        this.random.nextBytes(btw);
                                        field.set(object, new String(btw));
                                    } else if (clazz.equals(Date.class)) {
                                        field.set(object, new Date(this.random.nextLong()));
                                    } else if (clazz.equals(BigDecimal.class)) {
                                        field.set(object, new BigDecimal(this.random.nextDouble()));
                                    } else if (clazz.equals(BigInteger.class)) {
                                        field.set(object, new BigInteger(Math.abs(this.random.nextInt()) % 10, this.random));
                                    } else if (clazz.isEnum()) {
                                        int sizeEnum = clazz.getEnumConstants().length;
                                        field.set(object, clazz.getEnumConstants()[Math.abs(this.random.nextInt()) % sizeEnum]);
                                    } else if (!clazz.isArray() && clazz.getEnclosingClass() == null && clazz != List.class) {
                                        field.set(object, this.randomInitialize(field.getType()));
                                    }
                                } else {
                                    btw = new byte[1];
                                    this.random.nextBytes(btw);
                                    field.set(object, btw[0]);
                                }
                            } else {
                                field.set(object, this.random.nextBoolean());
                            }
                        } else {
                            field.set(object, this.random.nextFloat());
                        }
                    } else {
                        field.set(object, this.random.nextDouble());
                    }
                } else {
                    field.set(object, this.random.nextLong());
                }
            } else {
                field.set(object, this.random.nextInt());
            }

        } catch (IllegalAccessException var6) {
            throw new RuntimeException(var6);
        }
    }
}
